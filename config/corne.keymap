#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        Caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <24 35>;
        };
    };

    behaviors {
        Zero_grave: Zero_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_GRAVE";
            bindings = <&kp KP_NUMBER_0>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backdel: backdel {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKDEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        left: left {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT";
            bindings = <&kp LEFT>, <&mmv MOVE_LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        down: down {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN";
            bindings = <&kp DOWN>, <&mmv MOVE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up: up {
            compatible = "zmk,behavior-mod-morph";
            label = "UP";
            bindings = <&kp UP_ARROW>, <&mmv MOVE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right: right {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT";
            bindings = <&kp RIGHT>, <&mmv MOVE_RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp TAB       &kp Q           &kp W           &kp E               &kp R             &kp T        &kp Y      &kp U              &kp I        &kp O            &kp P          &kp BSLH
&kp CAPSLOCK  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H      &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &mt RGUI SEMI  &kp SQT
&mkp LCLK     &kp Z           &kp X           &kp C               &kp V             &kp B        &kp N      &kp M              &kp COMMA    &kp DOT          &kp FSLH       &mkp RCLK
                                              &kp ESCAPE          &mo 2             &kp SPACE    &kp ENTER  &mo 1              &backdel
            >;
        };

        Raise {
            bindings = <
&trans  &kp GRAVE      &kp EXCLAMATION     &kp AT           &kp HASH                   &kp DOLLAR    &kp LEFT_BRACE        &kp N7         &kp N8        &kp N9            &kp RIGHT_BRACE             &none
&mo 2   &mt LGUI PLUS  &mt LEFT_ALT MINUS  &mt LCTRL EQUAL  &mt LEFT_SHIFT UNDERSCORE  &kp TILDE     &kp LEFT_PARENTHESIS  &mt RSHIFT N4  &mt RCTRL N5  &mt RIGHT_ALT N6  &mt RGUI RIGHT_PARENTHESIS  &mo 2
&trans  &kp PERCENT    &kp CARET           &kp AMPERSAND    &kp ASTRK                  &none         &kp LEFT_BRACKET      &kp N1         &kp N2        &kp N3            &kp RIGHT_BRACKET           &trans
                                           &trans           &trans                     &trans        &trans                &trans         &Zero_grave
            >;
        };

        Lower {
            bindings = <
&kp F1  &kp F2    &kp F3        &kp F4     &kp F5      &kp F6    &kp F7          &kp F8          &kp F9        &kp F10          &kp F11   &kp F12
&none   &kp LGUI  &kp LEFT_ALT  &kp LCTRL  &kp LSHIFT  &none     &left           &down           &up           &right           &kp HOME  &kp PAGE_UP
&trans  &none     &none         &none      &none       &none     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp END   &kp PAGE_DOWN
                                &trans     &trans      &trans    &trans          &trans          &trans
            >;
        };
    };
};
